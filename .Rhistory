# data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c("LM","WM","RM","litter")] = na.spline(data.set[,c("LM","WM","RM","litter")])
# plot(data.set$Date, data.set$LM)
C.balance$GPP[v] = sum(data.set$GPP)
C.balance$Ra[v] = sum(data.set$Ra)
C.balance$Cs[v] = (data.set$LM[nrow(data.set)] - data.set$LM[1]) + (data.set$WM[nrow(data.set)] - data.set$WM[1]) + (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$Rm_root[v] = sum(data.set$Rd.fineroot.mean*data.set$RM*data.set$FRratio + data.set$Rd.intermediateroot.mean*data.set$RM*data.set$IRratio +
data.set$Rd.coarseroot.mean*data.set$RM*data.set$CRratio + data.set$Rd.boleroot.mean*data.set$RM*data.set$BRratio)
C.balance$Rg_root[v] = 0.3 * (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$Clit_foliage[v] = data.set$litter[nrow(data.set)] - data.set$litter[1]
C.balance$Cn[v] = data.set$TNC_tot[max(which(complete.cases(data.set$TNC_tot)))] - data.set$TNC_tot[min(which(complete.cases(data.set$TNC_tot)))]
C.balance$C.output[v] = C.balance$Ra[v] + C.balance$Cs[v] + C.balance$Rm_root[v] + C.balance$Rg_root[v] + C.balance$Clit_foliage[v] + C.balance$Cn[v]
C.balance$Clit_root[v] = C.balance$GPP[v] - C.balance$C.output[v]
}
C.balance = data.frame(matrix(ncol = 10, nrow = length(treat.group)))
names(C.balance) = c("Treatment","GPP","Ra","Rm_root","Rg_root","Cs","Clit_foliage","Cn","C.output","Clit_root")
C.balance$Treatment = treat.group
for (v in 1:length(treat.group)) {
data.set = subset(data.all,(T_treatment %in% treat.group[v]))
# data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c("LM","WM","RM","litter")] = na.spline(data.set[,c("LM","WM","RM","litter")])
# plot(data.set$Date, data.set$LM)
C.balance$GPP[v] = sum(data.set$GPP)
C.balance$Ra[v] = sum(data.set$Ra)
C.balance$Cs[v] = (data.set$LM[nrow(data.set)] - data.set$LM[1]) + (data.set$WM[nrow(data.set)] - data.set$WM[1]) + (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$Rm_root[v] = sum(data.set$Rd.fineroot.mean*data.set$RM*data.set$FRratio + data.set$Rd.intermediateroot.mean*data.set$RM*data.set$IRratio +
data.set$Rd.coarseroot.mean*data.set$RM*data.set$CRratio + data.set$Rd.boleroot.mean*data.set$RM*data.set$BRratio)
C.balance$Rg_root[v] = 0.3 * (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$Clit_foliage[v] = data.set$litter[nrow(data.set)] - data.set$litter[1]
C.balance$Cn[v] = data.set$TNC_tot[max(which(complete.cases(data.set$TNC_tot)))] - data.set$TNC_tot[min(which(complete.cases(data.set$TNC_tot)))]
C.balance$Clit_root[v] = 0.1 * C.balance$Clit_foliage[v]
C.balance$C.output[v] = C.balance$Ra[v] + C.balance$Cs[v] + C.balance$Rm_root[v] + C.balance$Rg_root[v] + C.balance$Clit_foliage[v] + C.balance$Cn[v] + C.balance$Clit_root[v]
C.balance$C_imbalance[v] = C.balance$GPP[v] - C.balance$C.output[v]
}
C.balance = data.frame(matrix(ncol = 10, nrow = length(treat.group)))
names(C.balance) = c("Treatment","GPP","Ra","Rm_root","Rg_root","Cs","Clit_foliage","Cn","Clit_root","C.output","C.imbalance")
C.balance$Treatment = treat.group
for (v in 1:length(treat.group)) {
data.set = subset(data.all,(T_treatment %in% treat.group[v]))
# data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c("LM","WM","RM","litter")] = na.spline(data.set[,c("LM","WM","RM","litter")])
# plot(data.set$Date, data.set$LM)
C.balance$GPP[v] = sum(data.set$GPP)
C.balance$Ra[v] = sum(data.set$Ra)
C.balance$Cs[v] = (data.set$LM[nrow(data.set)] - data.set$LM[1]) + (data.set$WM[nrow(data.set)] - data.set$WM[1]) + (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$Rm_root[v] = sum(data.set$Rd.fineroot.mean*data.set$RM*data.set$FRratio + data.set$Rd.intermediateroot.mean*data.set$RM*data.set$IRratio +
data.set$Rd.coarseroot.mean*data.set$RM*data.set$CRratio + data.set$Rd.boleroot.mean*data.set$RM*data.set$BRratio)
C.balance$Rg_root[v] = 0.3 * (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$Clit_foliage[v] = data.set$litter[nrow(data.set)] - data.set$litter[1]
C.balance$Cn[v] = data.set$TNC_tot[max(which(complete.cases(data.set$TNC_tot)))] - data.set$TNC_tot[min(which(complete.cases(data.set$TNC_tot)))]
C.balance$Clit_root[v] = 0.1 * C.balance$Clit_foliage[v]
C.balance$C.output[v] = C.balance$Ra[v] + C.balance$Cs[v] + C.balance$Rm_root[v] + C.balance$Rg_root[v] + C.balance$Clit_foliage[v] + C.balance$Cn[v] + C.balance$Clit_root[v]
C.balance$C.imbalance[v] = C.balance$GPP[v] - C.balance$C.output[v]
}
C.balance = data.frame(matrix(ncol = 10, nrow = length(treat.group)))
names(C.balance) = c("Treatment","GPP","Ra","Rm_root","Rg_root","Cs","Clit_foliage","Cn","Clit_root","C.output","C.imbalance")
C.balance$Treatment = treat.group
C.balance = data.frame(matrix(ncol = 11, nrow = length(treat.group)))
names(C.balance) = c("Treatment","GPP","Ra","Rm_root","Rg_root","Cs","Clit_foliage","Cn","Clit_root","C.output","C.imbalance")
C.balance$Treatment = treat.group
for (v in 1:length(treat.group)) {
data.set = subset(data.all,(T_treatment %in% treat.group[v]))
# data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c("LM","WM","RM","litter")] = na.spline(data.set[,c("LM","WM","RM","litter")])
# plot(data.set$Date, data.set$LM)
C.balance$GPP[v] = sum(data.set$GPP)
C.balance$Ra[v] = sum(data.set$Ra)
C.balance$Cs[v] = (data.set$LM[nrow(data.set)] - data.set$LM[1]) + (data.set$WM[nrow(data.set)] - data.set$WM[1]) + (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$Rm_root[v] = sum(data.set$Rd.fineroot.mean*data.set$RM*data.set$FRratio + data.set$Rd.intermediateroot.mean*data.set$RM*data.set$IRratio +
data.set$Rd.coarseroot.mean*data.set$RM*data.set$CRratio + data.set$Rd.boleroot.mean*data.set$RM*data.set$BRratio)
C.balance$Rg_root[v] = 0.3 * (data.set$RM[nrow(data.set)] - data.set$RM[1])
C.balance$Clit_foliage[v] = data.set$litter[nrow(data.set)] - data.set$litter[1]
C.balance$Cn[v] = data.set$TNC_tot[max(which(complete.cases(data.set$TNC_tot)))] - data.set$TNC_tot[min(which(complete.cases(data.set$TNC_tot)))]
C.balance$Clit_root[v] = 0.1 * C.balance$Clit_foliage[v]
C.balance$C.output[v] = C.balance$Ra[v] + C.balance$Cs[v] + C.balance$Rm_root[v] + C.balance$Rg_root[v] + C.balance$Clit_foliage[v] + C.balance$Cn[v] + C.balance$Clit_root[v]
C.balance$C.imbalance[v] = C.balance$GPP[v] - C.balance$C.output[v]
}
C.balance.fraction = C.balance[, c(3:9)]
C.balance.fraction[,] = C.balance.fraction[,] / C.balance[,2] * 100
row.names(C.balance.fraction) <- treat.group
C.balance = C.balance[,-c(10,11)]
colnames(C.balance) <- c("Treatment", "GPP (g C)", "Ra (g C)", "Rm_root (g C)", "Rg_root (g C)", "Cs (g C)", "Clit_foliage (g C)", "Cn (g C)", "Clit_root (g C)")
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
png("output/Figure_1a_C_balance_wtc3.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 110), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:7],legend = c(expression(R[a]),expression(R["m,root"]),expression(R["g,root"]),expression(C[s]),
expression(C["lit,foliage"]),expression(C[n]),expression(C["lit,root"])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.17, 0)))
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
dev.off()
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
png("output/Figure_1a_C_balance_wtc3.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 110), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:7],legend = c(expression(R[a]),expression(R["m,root"]),expression(R["g,root"]),expression(C[s]),
expression(C["lit,foliage"]),expression(C[n]),expression(C["lit,root"])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.2, 0)))
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
dev.off()
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
png("output/Figure_1a_C_balance_wtc3.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(C.balance.fraction)), ylim=c(0, 110), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:7],legend = c(expression(R[a]),expression(R["m,root"]),expression(R["g,root"]),expression(C[s]),
expression(C["lit,foliage"]),expression(C[n]),expression(C["lit,root"])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.22, 0)))
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(C.balance.fraction)+0.5, labels = round(C.balance[,2],1), pos = 3, cex=1, col="red")
dev.off()
View(data.all)
rm(list=ls())
#-------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------
# Load required libraries. There are quite a few, including some non-standard functions that are not on CRAN.
# This script will check for required libraries and install any that are missing
source('R/load_packages_wtc3.R')
# Load the custom analysis and plotting functions that do all of the actual work
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
#-------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------
# #- Download data files for WTC3 experiment. This downloads the zipfile from figshare
# download.file("https://ndownloader.figshare.com/files/4857112", "data.zip", mode="wb")
# # Extract data to different folders.
# unzip("data.zip")
#-------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------
#- This script imports and processes the raw WTC3 experiment data to model the carbon pools and fluxes using DA
# source("R/initial_data_processing_wtc3.R")
rmd2rscript("report_initial_data_processing_wtc3.Rmd")
source("report_initial_data_processing_wtc3.R")
#-------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------
# #- Make figure 1. Model representation of storage, allocation and autotrophic respiration processes and
# # pathways in the CBM with storage pool, separate growth and maintenance respiration components.
# plot.model.wtc3()
#-------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------
#- Read the processed data and clean the workspace from data pre-processing
#  Processed data are placed in "processed_data" folder
# source("R/read_data_wtc3.R")
#-------------------------------------------------------------------------------------
# Model run for WTC3 dataset (without LA feedback)
# treat.group = as.factor(c("ambient")) # Assign 1 treatment to check the model
# treat.group = as.factor(c("ambient drought","elevated drought")) # Assign 1 treatment to check the model
# treat.group = as.factor(c("ambient drought","ambient watered")) # Assign 2 treatments to compare the results
treat.group = as.factor(c("ambient","elevated")) # Assign all treatments
data.all = read.csv("processed_data/data_all.csv")
tnc.partitioning = read.csv("processed_data/tnc_partitioning_data.csv")
# #-------------------------------------------------------------------------------------
# #- Matching C balance of the entire experiment considering C inputs and outputs
# source("R/C_balance_wtc3.R")
#
# #-------------------------------------------------------------------------------------
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
start <- proc.time() # Start clock
# 3000 chain length is sufficient for the convergance
with.storage = T
# result = CBM.wtc3(chainLength = 3000, no.param.par.var=(nrow(data.all)/4)/30, treat.group=treat.group, with.storage, model.comparison=F, model.optimization=F) # Monthly parameters
result = CBM.wtc3(chainLength = 1000, no.param.par.var=2, treat.group=treat.group, with.storage, model.comparison=F, model.optimization=F) # Quadratic/Cubic parameters
time_elapsed_series <- proc.time() - start # End clock
result[[6]]
write.csv(result[[6]], "output/bic.csv", row.names=FALSE) # unit of respiration rates: gC per gC plant per day
# Plot parameters and biomass data fit
plot.Modelled.parameters(result,with.storage)
plot.Modelled.biomass(result,with.storage)
source("R/C_partitioning_wtc3.R")
chainLength = 1000
no.param.par.var=2
with.storage = T
source("R/C_partitioning_wtc3.R")
################ Figure 7 #####################
# Calculate total C partitioning for individual treatments
#-------------------------------------------------------------------------------------
# cbPalette = c("gray", "orange", "skyblue", "green3", "yellow3", "#0072B2", "#D55E00")
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
# vol_group <- list(c(5,10,15),c(20,25,35),1000)
# treat.group = as.factor(c("ambient drought","ambient watered","elevated drought","elevated watered")) # Assign all treatments
Ct.group = data.frame(matrix(ncol = 9, nrow = length(treat.group)))
names(Ct.group) = c("GPP","Rg","Rm","Cs","Cr","Cw","Cf","Cflit","Crlit")
param.summary = result[[2]]
data.summary = result[[3]]
output.summary = result[[4]]
Cstorage.data = result[[7]]
Cstorage.data = Cstorage.data[with(Cstorage.data, order(Date,treatment)), 1:3]
names(Cstorage.data)[1] = "Cs"
data.part = data.all[c("Date","Treatment","GPP")]
names(data.part)[2] = "treatment"
data.part$Date = as.Date(data.part$Date)
Rm.data = subset(output.summary, variable %in% "Rm")
names(Rm.data)[3] = "Rm"
data.part = merge(data.part, Rm.data[,c(1,3,4)], by=c("Date","treatment"))
data.part = merge(data.part, Cstorage.data, by=c("Date","treatment"))
cpool = as.factor(c("Mleaf.modelled","Mwood.modelled","Mroot.modelled","Mlit.modelled","Sleaf.modelled"))
for (i in 1:length(cpool)) {
cpool.data = subset(output.summary, variable %in% cpool[i])
cpool.data = cpool.data[, c("Date","value","treatment")]
cpool.data = cpool.data[with(cpool.data, order(Date,treatment)), ]
names(cpool.data)[2] = as.character(cpool[i])
data.part = merge(data.part,cpool.data, all = TRUE)
}
# combine data and parameters together
var = as.factor(c("k","Y","af","as","ar","sf","sr"))
if (no.param.par.var < 5) {
for (i in 1:length(var)) {
param = subset(param.summary, variable %in% var[i])
param = param[, c("Date","Parameter","treatment")]
param = param[with(param, order(Date,treatment)), ]
names(param)[2] = as.character(var[i])
data.part = merge(data.part,param, all = TRUE)
}
} else {
for (i in 1:length(var)) {
for (j in 1:length(unique(param.summary$Date))) {
if (j < length(unique(param.summary$Date))) {
param = subset(param.summary, variable %in% var[i] & Date >= unique(param.summary$Date)[j] & Date < unique(param.summary$Date)[j+1])
} else {
param = subset(param.summary, variable %in% var[i] & Date >= unique(param.summary$Date)[j])
}
param = param[, c("Date","Parameter","treatment")]
param = param[with(param, order(treatment)), ]
names(param)[2] = as.character(var[i])
if (j < length(unique(param.summary$Date))) {
param.part.set = merge (subset(data.part, Date >= unique(param.summary$Date)[j] & Date < unique(param.summary$Date)[j+1]), param[,c(2:3)], by="treatment")
} else {
param.part.set = merge (subset(data.part, Date >= unique(param.summary$Date)[j]), param[,c(2:3)], by="treatment")
}
if (j == 1) {
param.part = param.part.set
} else {
param.part = rbind(param.part,param.part.set)
}
}
data.part = merge(data.part,param.part, all = TRUE)
}
}
data.part = data.part[with(data.part, order(treatment,Date)), ]
# data.set = data.part[data.part$Date <= as.Date("2013-05-21"), ]
for (v in 1:length(treat.group)) {
Ct.group$GPP[v] = sum ( data.part$GPP[which(data.part$treatment %in% treat.group[v])] )
Ct.group$Rm[v] = sum ( data.part$Rm[which(data.part$treatment %in% treat.group[v])] )
Ct.group$Cs[v] = data.part$Cs[which(data.part$treatment %in% treat.group[v] & data.part$Date %in% as.Date("2014-05-26"))]
Ct.group[v, c(5:7)] = data.part[which(data.part$treatment %in% treat.group[v] & data.part$Date %in% as.Date("2014-05-26")), 8:6] - data.part[which(data.part$treatment %in% treat.group[v] & data.part$Date %in% as.Date("2013-09-17")), 8:6]
Ct.group$Cflit[v] = data.part[which(data.part$treatment %in% treat.group[v] & data.part$Date %in% as.Date("2014-05-26")), 9]
Ct.group$Crlit[v] = sum ( data.part$sr [which(data.part$treatment %in% treat.group[v])] * data.part$Mroot.modelled [which(data.part$treatment %in% treat.group[v])])
Ct.group$Rg[v] = Ct.group$GPP[v] - sum(Ct.group[v,c(3:9)])
}
Ct.fraction.group = Ct.group[, c(2:9)]
Ct.fraction.group[,] = Ct.fraction.group[,] / Ct.group[, 1] * 100
# row.names(Ct.fraction.group) <- c("amb-dry","amb-wet","warm-dry","warm-wet")
row.names(Ct.fraction.group) <- c("ambient","warmed")
Ct.group$treatment = treat.group
colnames(Ct.group) <- c("GPP (g C)", "Rg (g C)", "Rm (g C)", "Cs (g C)", "Cr (g C)", "Cw (g C)", "Cf (g C)", "Cflit (g C)", "Crlit (g C)", "Treatment")
Ct.group = Ct.group[,c(10,1,2,3,4,7,5,6,8,9)]
write.csv(Ct.group, file = "output/C_partitioning_wtc3.csv", row.names = FALSE)
png("output/Figure_7_C_partitioning_wtc3.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:8],legend = c(expression(R[g]),expression(R["m,tot"]),expression(C[s]),expression(C["s,r"]),expression(C["s,w"]),expression(C["s,f"]),expression(C["f,lit"]),expression(C["r,lit"])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.18, 0)))
# text( bb, Ct.fraction.group[,1]-3, labels = round(Ct.group[,3],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]-4, labels = round(Ct.group[,4],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]-1, labels = round(Ct.group[,5],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]-3, labels = round(Ct.group[,6],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]-3, labels = round(Ct.group[,7],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]-2, labels = round(Ct.group[,8],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(Ct.fraction.group)+0.5, labels = round(Ct.group[,2],1), pos = 3, cex=1, col="red")
dev.off()
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
# vol_group <- list(c(5,10,15),c(20,25,35),1000)
# treat.group = as.factor(c("ambient drought","ambient watered","elevated drought","elevated watered")) # Assign all treatments
Ct.group = data.frame(matrix(ncol = 9, nrow = length(treat.group)))
names(Ct.group) = c("GPP","Rg","Rm","Cs","Cr","Cw","Cf","Cflit","Crlit")
param.summary = result[[2]]
data.summary = result[[3]]
output.summary = result[[4]]
Cstorage.data = result[[7]]
Cstorage.data = Cstorage.data[with(Cstorage.data, order(Date,treatment)), 1:3]
names(Cstorage.data)[1] = "Cs"
data.part = data.all[c("Date","Treatment","GPP")]
names(data.part)[2] = "treatment"
data.part$Date = as.Date(data.part$Date)
View(data.part)
Rm.data = subset(output.summary, variable %in% "Rm")
names(Rm.data)[3] = "Rm"
data.part = merge(data.part, Rm.data[,c(1,3,4)], by=c("Date","treatment"))
data.part = merge(data.part, Cstorage.data, by=c("Date","treatment"))
cpool = as.factor(c("Mleaf.modelled","Mwood.modelled","Mroot.modelled","Mlit.modelled","Sleaf.modelled"))
for (i in 1:length(cpool)) {
cpool.data = subset(output.summary, variable %in% cpool[i])
cpool.data = cpool.data[, c("Date","value","treatment")]
cpool.data = cpool.data[with(cpool.data, order(Date,treatment)), ]
names(cpool.data)[2] = as.character(cpool[i])
data.part = merge(data.part,cpool.data, all = TRUE)
}
# combine data and parameters together
var = as.factor(c("k","Y","af","as","ar","sf","sr"))
if (no.param.par.var < 5) {
for (i in 1:length(var)) {
param = subset(param.summary, variable %in% var[i])
param = param[, c("Date","Parameter","treatment")]
param = param[with(param, order(Date,treatment)), ]
names(param)[2] = as.character(var[i])
data.part = merge(data.part,param, all = TRUE)
}
} else {
for (i in 1:length(var)) {
for (j in 1:length(unique(param.summary$Date))) {
if (j < length(unique(param.summary$Date))) {
param = subset(param.summary, variable %in% var[i] & Date >= unique(param.summary$Date)[j] & Date < unique(param.summary$Date)[j+1])
} else {
param = subset(param.summary, variable %in% var[i] & Date >= unique(param.summary$Date)[j])
}
param = param[, c("Date","Parameter","treatment")]
param = param[with(param, order(treatment)), ]
names(param)[2] = as.character(var[i])
if (j < length(unique(param.summary$Date))) {
param.part.set = merge (subset(data.part, Date >= unique(param.summary$Date)[j] & Date < unique(param.summary$Date)[j+1]), param[,c(2:3)], by="treatment")
} else {
param.part.set = merge (subset(data.part, Date >= unique(param.summary$Date)[j]), param[,c(2:3)], by="treatment")
}
if (j == 1) {
param.part = param.part.set
} else {
param.part = rbind(param.part,param.part.set)
}
}
data.part = merge(data.part,param.part, all = TRUE)
}
}
data.part = data.part[with(data.part, order(treatment,Date)), ]
################ Figure 7 #####################
# Calculate total C partitioning for individual treatments
#-------------------------------------------------------------------------------------
# cbPalette = c("gray", "orange", "skyblue", "green3", "yellow3", "#0072B2", "#D55E00")
cbPalette = c("gray", "orange", "skyblue", "green3", "#009E73", "yellow3", "#0072B2", "#D55E00")
# vol_group <- list(c(5,10,15),c(20,25,35),1000)
# treat.group = as.factor(c("ambient drought","ambient watered","elevated drought","elevated watered")) # Assign all treatments
Ct.group = data.frame(matrix(ncol = 9, nrow = length(treat.group)))
names(Ct.group) = c("GPP","Rg","Rm","Cs","Cr","Cw","Cf","Cflit","Crlit")
param.summary = result[[2]]
data.summary = result[[3]]
output.summary = result[[4]]
Cstorage.data = result[[7]]
Cstorage.data = Cstorage.data[with(Cstorage.data, order(Date,treatment)), 1:3]
names(Cstorage.data)[1] = "Cs"
data.part = data.all[c("Date","Treatment","GPP")]
names(data.part)[2] = "treatment"
data.part$Date = as.Date(data.part$Date)
Rm.data = subset(output.summary, variable %in% "Rm")
names(Rm.data)[3] = "Rm"
data.part = merge(data.part, Rm.data[,c(1,3,4)], by=c("Date","treatment"))
data.part = merge(data.part, Cstorage.data, by=c("Date","treatment"))
cpool = as.factor(c("Mleaf.modelled","Mwood.modelled","Mroot.modelled","Mlit.modelled","Sleaf.modelled"))
for (i in 1:length(cpool)) {
cpool.data = subset(output.summary, variable %in% cpool[i])
cpool.data = cpool.data[, c("Date","value","treatment")]
cpool.data = cpool.data[with(cpool.data, order(Date,treatment)), ]
names(cpool.data)[2] = as.character(cpool[i])
data.part = merge(data.part,cpool.data, all = TRUE)
}
# combine data and parameters together
var = as.factor(c("k","Y","af","as","ar","sf","sr"))
if (no.param.par.var < 5) {
for (i in 1:length(var)) {
param = subset(param.summary, variable %in% var[i])
param = param[, c("Date","Parameter","treatment")]
param = param[with(param, order(Date,treatment)), ]
names(param)[2] = as.character(var[i])
data.part = merge(data.part,param, all = TRUE)
}
} else {
for (i in 1:length(var)) {
for (j in 1:length(unique(param.summary$Date))) {
if (j < length(unique(param.summary$Date))) {
param = subset(param.summary, variable %in% var[i] & Date >= unique(param.summary$Date)[j] & Date < unique(param.summary$Date)[j+1])
} else {
param = subset(param.summary, variable %in% var[i] & Date >= unique(param.summary$Date)[j])
}
param = param[, c("Date","Parameter","treatment")]
param = param[with(param, order(treatment)), ]
names(param)[2] = as.character(var[i])
if (j < length(unique(param.summary$Date))) {
param.part.set = merge (subset(data.part, Date >= unique(param.summary$Date)[j] & Date < unique(param.summary$Date)[j+1]), param[,c(2:3)], by="treatment")
} else {
param.part.set = merge (subset(data.part, Date >= unique(param.summary$Date)[j]), param[,c(2:3)], by="treatment")
}
if (j == 1) {
param.part = param.part.set
} else {
param.part = rbind(param.part,param.part.set)
}
}
data.part = merge(data.part,param.part, all = TRUE)
}
}
data.part = data.part[with(data.part, order(treatment,Date)), ]
# data.set = data.part[data.part$Date <= as.Date("2013-05-21"), ]
for (v in 1:length(treat.group)) {
Ct.group$GPP[v] = sum ( data.part$GPP[which(data.part$treatment %in% treat.group[v])] )
Ct.group$Rm[v] = sum ( data.part$Rm[which(data.part$treatment %in% treat.group[v])] )
Ct.group$Cs[v] = data.part$Cs[which(data.part$treatment %in% treat.group[v] & data.part$Date %in% as.Date("2014-02-12"))]
Ct.group[v, c(5:7)] = data.part[which(data.part$treatment %in% treat.group[v] & data.part$Date %in% as.Date("2014-02-12")), 8:6] - data.part[which(data.part$treatment %in% treat.group[v] & data.part$Date %in% as.Date("2013-09-17")), 8:6]
Ct.group$Cflit[v] = data.part[which(data.part$treatment %in% treat.group[v] & data.part$Date %in% as.Date("2014-02-12")), 9]
Ct.group$Crlit[v] = sum ( data.part$sr [which(data.part$treatment %in% treat.group[v])] * data.part$Mroot.modelled [which(data.part$treatment %in% treat.group[v])])
Ct.group$Rg[v] = Ct.group$GPP[v] - sum(Ct.group[v,c(3:9)])
}
Ct.fraction.group = Ct.group[, c(2:9)]
Ct.fraction.group[,] = Ct.fraction.group[,] / Ct.group[, 1] * 100
# row.names(Ct.fraction.group) <- c("amb-dry","amb-wet","warm-dry","warm-wet")
row.names(Ct.fraction.group) <- c("ambient","warmed")
Ct.group$treatment = treat.group
colnames(Ct.group) <- c("GPP (g C)", "Rg (g C)", "Rm (g C)", "Cs (g C)", "Cr (g C)", "Cw (g C)", "Cf (g C)", "Cflit (g C)", "Crlit (g C)", "Treatment")
Ct.group = Ct.group[,c(10,1,2,3,4,7,5,6,8,9)]
write.csv(Ct.group, file = "output/C_partitioning_wtc3.csv", row.names = FALSE)
png("output/Figure_7_C_partitioning_wtc3.png", units="px", width=1200, height=1000, res=200)
par(mfrow = c(1, 1), mar=c(5, 4, 2, 6))
# bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Treatments (Container size)",
#         col = rainbow(20),legend = colnames(Ct.fraction.group),
#         args.legend = list(x = "topright", bty = "n", inset=c(-0.15, 0)))
bb = barplot(as.matrix(t(Ct.fraction.group)), ylim=c(0, 107), ylab = "C Partitioning (%)", xlab = "Container size (L))",
col = cbPalette[1:8],legend = c(expression(R[g]),expression(R["m,tot"]),expression(C[s]),expression(C["s,r"]),expression(C["s,w"]),expression(C["s,f"]),expression(C["f,lit"]),expression(C["r,lit"])),
args.legend = list(x = "topright", bty = "n", inset=c(-0.18, 0)))
# text( bb, Ct.fraction.group[,1]-3, labels = round(Ct.group[,3],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]-4, labels = round(Ct.group[,4],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]-1, labels = round(Ct.group[,5],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]-3, labels = round(Ct.group[,6],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]-3, labels = round(Ct.group[,7],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]-2, labels = round(Ct.group[,8],1), cex=.9)
# text( bb, Ct.fraction.group[,1]+Ct.fraction.group[,2]+Ct.fraction.group[,3]+Ct.fraction.group[,4]+Ct.fraction.group[,5]+Ct.fraction.group[,6]+Ct.fraction.group[,7]-1, labels = round(Ct.group[,9],1), cex=.9)
text( bb, rowSums(Ct.fraction.group)+0.5, labels = round(Ct.group[,2],1), pos = 3, cex=1, col="red")
dev.off()
source('R/load_packages_wtc3.R')
# Load the custom analysis and plotting functions that do all of the actual work
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
treat.group = as.factor(c("ambient","elevated")) # Assign all treatments
data.all = read.csv("processed_data/data_all.csv")
tnc.partitioning = read.csv("processed_data/tnc_partitioning_data.csv")
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
start <- proc.time() # Start clock
# 3000 chain length is sufficient for the convergance
chainLength = 1000
no.param.par.var=2
with.storage = T
model.comparison=F
model.optimization=F
# result = CBM.wtc3(chainLength = 3000, no.param.par.var=(nrow(data.all)/4)/30, treat.group=treat.group, with.storage, model.comparison=F, model.optimization=F) # Monthly parameters
result = CBM.wtc3(chainLength, no.param.par.var, treat.group, with.storage, model.comparison, model.optimization) # Quadratic/Cubic parameters
time_elapsed_series <- proc.time() - start # End clock
result[[6]]
write.csv(result[[6]], "output/bic.csv", row.names=FALSE) # unit of respiration rates: gC per gC plant per day
# Plot parameters and biomass data fit
plot.Modelled.parameters(result,with.storage)
plot.Modelled.biomass(result,with.storage)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
start <- proc.time() # Start clock
# 3000 chain length is sufficient for the convergance
chainLength = 1000
no.param.par.var=2
with.storage = T
model.comparison=F
model.optimization=F
# result = CBM.wtc3(chainLength = 3000, no.param.par.var=(nrow(data.all)/4)/30, treat.group=treat.group, with.storage, model.comparison=F, model.optimization=F) # Monthly parameters
result = CBM.wtc3(chainLength, no.param.par.var, treat.group, with.storage, model.comparison, model.optimization) # Quadratic/Cubic parameters
time_elapsed_series <- proc.time() - start # End clock
result[[6]]
write.csv(result[[6]], "output/bic.csv", row.names=FALSE) # unit of respiration rates: gC per gC plant per day
# Plot parameters and biomass data fit
plot.Modelled.parameters(result,with.storage)
plot.Modelled.biomass(result,with.storage)
View(data.all)
no.param.par.var
C.balance = data.frame(matrix(ncol = 11, nrow = length(treat.group)))
names(C.balance) = c("Treatment","GPP","Ra","Rm_root","Rg_root","Cs","Clit_foliage","Cn","Clit_root","C.output","C.imbalance")
C.balance$Treatment = treat.group
View(C.balance)
length(treat.group)
v=1
data.set = subset(data.all,(treatment %in% treat.group[v]))
View(data.all)
treat.group[v]
data.set = subset(data.all,(Treatment %in% treat.group[v]))
# data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c("LM","WM","RM","litter")] = na.spline(data.set[,c("LM","WM","RM","litter")])
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
source('R/load_packages_wtc3.R')
data.set = subset(data.all,(Treatment %in% treat.group[v]))
# data.set[nrow(data.set),c(10:17)] = data.set[nrow(data.set)-1,c(10:17)]
data.set[,c("LM","WM","RM","litter")] = na.spline(data.set[,c("LM","WM","RM","litter")])
View(data.set)
data.set = subset(data.all,(Treatment %in% treat.group[v]))
